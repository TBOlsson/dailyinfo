{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-green",
    "glyph" : "magic"
  },
  "name" : "DailyInfo v1.3.1",
  "script" : "\/\/ update those two to determine payDay and id you want to use correct weekday names or not\nconst salaryDay = 25;\nconst useFunWeekdayNames = true;\n\n\/\/obly needs to be updated if you want to change colours or font sizes\nconst firstBackgroundColor = \"ff5a5a\";\nconst secondBackgroundColor = \"190a05\";\nconst textColor = \"ffffff\";\nconst weekFontSize = 24;\nconst fontSize = 12;\n\n\/\/ NO NEED TO CHANGE ANYTHING BELOW THIS\n\/\/------------------------------------------\n\nconst thisVersion = \"1.3.1\";\n\n\/\/ PATCH NOTES\n\/\/1.3.1 added salaryDay variable since pension and some region employees dont get paid 25th\n\/\/1.3.0 added daily quote\n\/\/1.2.0 added days until next salary\n\/\/1.1.0 broke out hardcoded into functions\n\/\/1.0.0 Made script\n\nconst widget = await createWidget(thisVersion);\n\nconfig.runsInWidget ? Script.setWidget(widget) :\n  widget.presentMedium();\n\nScript.complete();\n\nasync function createWidget(currentVerion) {\n  const latestVersion = await getLatestVersion();\n  const quote = await getRandomDailyQuote();\n  let lw = new ListWidget();\n  \n  let gradient = new LinearGradient();\n  gradient.colors = [\n    new Color(firstBackgroundColor), \n    new Color(secondBackgroundColor),\n  ];\n  gradient.locations = [\n    0, \n    1,\n  ];\n  gradient.startPoint = new Point(0, 0)\n  gradient.endPoint = new Point(1, 1)\n\n  lw.backgroundGradient = gradient;\n\n  let d = new Date();\n  d.setHours(d.getHours() + 24);\n  lw.refreshAfterDate = d;\n\n  if(currentVerion !== latestVersion) {\n    addWidgetText(`There seems to be an newer version of this script to be downloaded. \\n\\nCurrent version: ${currentVerion} \\nLatest version: ${latestVersion}`, lw, fontSize, textColor);\n    return lw\n  } else {\n    addWidgetText(`Vecka: ${getWeek()}`, lw, weekFontSize, textColor)\n    lw.addSpacer(10);\n    addWidgetText(formatDate(), lw, fontSize, textColor);\n    lw.addSpacer(5);\n    addWidgetText(getWeekday(new Date(), useFunWeekdayNames), lw, fontSize, textColor);\n    lw.addSpacer(5);\n    addWidgetText(daysUntilNextSalary(new Date(), salaryDay), lw, fontSize, textColor);\n    lw.addSpacer(5);\n    addWidgetText(quote, lw, 10, textColor)\n    return lw;\n  }\n}\n\nfunction addWidgetText(text, widget, fontSize = 10, textColor = \"black\") {\n  let wid = widget.addText(text.toString());\n  wid.centerAlignText();\n  wid.font = Font.lightSystemFont(fontSize);\n  wid.textColor = new Color(textColor);\n  return wid\n}\n\nasync function getRandomDailyQuote(){\n  let quote = await new Request(`https:\/\/script.google.com\/macros\/s\/AKfycbzvzWg-eubFOqYrCS0SuggOjqjJmqasJG0tN3uP6XAgumI1GmOMN1cEDY_eOylRQk1L\/exec`).loadString();\n  quote = JSON.parse(quote);\n  quote = quote[\"Your random quote of the day is:\"]\n  return quote\n}\n\nasync function getLatestVersion(){\n  let version = await new Request(`https:\/\/script.google.com\/macros\/s\/AKfycbzvzWg-eubFOqYrCS0SuggOjqjJmqasJG0tN3uP6XAgumI1GmOMN1cEDY_eOylRQk1L\/exec`).loadString();\n  version = JSON.parse(version);\n  version = version[\"LatestVersion\"]\n  return version\n}\n\nfunction daysUntilNextSalary(date = new Date(), salaryDay = 25) {\n  const today = new Date(date);\n  const currentDay = today.getDate();\n  \n  if (currentDay === salaryDay) {\n    return \"L√ñN IDAG!! üí∞ü§ë\";\n  }\n  \n  const salaryMonth = (currentDay > salaryDay) ? today.getMonth() + 1 : today.getMonth();\n  salaryDay = new Date(today.getFullYear(), salaryMonth, salaryDay);\n  const dayOfWeek = salaryDay.getDay();\n\n  \/\/ If salary day is a Saturday or Sunday, set it to the Friday before\n  if (dayOfWeek === 6) {\n    salaryDay.setDate(salaryDay.getDate() - 1);\n  } else if (dayOfWeek === 0) {\n    salaryDay.setDate(salaryDay.getDate() - 2);\n  }\n  \n  const daysUntil = Math.ceil((salaryDay - today) \/ (1000 * 60 * 60 * 24));\n  return daysUntil == 1 ? `${daysUntil} dag till l√∂n` : `${daysUntil} dagar till l√∂n`\n}\n\nfunction getWeekday(date = new Date(), toggleFunNames = true) {\n  let wd = new Date(date).getDay();\n    \n  switch(wd){\n    case 1:\n      wd = \"M√•ndag\";\n      break;\n    case 2:\n      wd = toggleFunNames ? \"Lill-fredag\" : \"Tisdag\";\n      break;\n    case 3:\n      wd = toggleFunNames ? \"Lill-l√∂rdag\" : \"Onsdag\";\n      break;\n    case 4:\n      wd = toggleFunNames ? \"F√∂r-fredag\" : \"Torsdag\";\n      break;\n    case 5:\n      wd = \"Fredag\";\n      break;\n    case 6:\n      wd = \"L√∂rdag\";\n      break;\n    case 0:\n      wd = \"S√∂ndag\";\n      break;\n    default:\n      wd = \"Dagen efter ig√•r, och innan imorgon\";\n      break;\n  }\n  return wd\n}\n\nfunction getWeek(date = new Date()){\n  \/\/function to get ISO8601 week\n  let tdt = new Date(date.valueOf());\n  const dayn = (new Date(date).getDay() + 6) % 7;\n  tdt.setDate(tdt.getDate() - dayn + 3);\n  const firstThursday = tdt.valueOf();\n  tdt.setMonth(0, 1);\n  if (tdt.getDay() !== 4){\n    tdt.setMonth(0, 1 + ((4 - tdt.getDay()) + 7) % 7);\n  }\n  let weekNum = 1 + Math.ceil((firstThursday - tdt) \/ 604800000);\n  return weekNum < 10 ? \"0\" + weekNum: weekNum;\n}\n\nfunction formatDate(date = new Date()){\n  let d = new Date(date);\n  let year = d.getFullYear();\n  let month = d.getMonth() + 1;\n  let day = d.getDate();\n  \n  month = month < 10 ? `0${month}` : month;\n  day = day < 10 ? `0${day}` : day;\n\n  return `${year}-${month}-${day}`\n}",
  "share_sheet_inputs" : [

  ]
}
